(Generate authentication code)

using BCrypt.Net;

public static class PasswordUtils
{
    public static string HashPassword(string password)
    {
        return BCrypt.Net.BCrypt.HashPassword(password);
    }

    public static bool VerifyPassword(string password, string hashedPassword)
    {
        return BCrypt.Net.BCrypt.Verify(password, hashedPassword);
    }
}

(Implement role-based authorization (RBAC))

public static class Authorization
{
    public static bool Authorize(User user, params string[] allowedRoles)
    {
        return user != null && allowedRoles.Contains(user.Role);
    }
}

(Test the authentication and authorization system)

public class AuthService
{
    private readonly List<User> _users;

    public AuthService(List<User> users)
    {
        _users = users;
    }

    public User Authenticate(string username, string password)
    {
        var user = _users.FirstOrDefault(u => u.Username == username);
        if (user != null && PasswordUtils.VerifyPassword(password, user.HashedPassword))
        {
            return user;
        }
        return null;
    }
}



